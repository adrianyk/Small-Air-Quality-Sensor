#include <Wire.h>
#include <SparkFun_u-blox_GNSS_Arduino_Library.h>
#include <HardwareSerial.h>
#include <BLEDevice.h>
#include <BLEServer.h>
#include <BLEUtils.h>
#include <BLE2902.h>

SFE_UBLOX_GNSS myGNSS;
HardwareSerial gpsSerial(1); // Use UART1
uint8_t fixType;

//BLE Setup
#define SERVICE_UUID        "4fafc201-1fb5-459e-8fcc-c5c9c331914b"
#define CHARACTERISTIC_UUID "beb5483e-36e1-4688-b7f5-ea07361b26a8"
BLEServer* pServer = nullptr;
BLECharacteristic* pCharacteristic = nullptr;
bool deviceConnected = false;
//BLE Callback
class MyServerCallbacks : public BLEServerCallbacks {
  void onConnect(BLEServer* pServer) {
    deviceConnected = true;
  }
  void onDisconnect(BLEServer* pServer) {
    deviceConnected = false;
  }
};

void setup() {
  Serial.begin(115200);
  gpsSerial.begin(9600, SERIAL_8N1, 16, 17); // RX, TX

  if (!myGNSS.begin(gpsSerial)) {
    Serial.println("GNSS not detected. Check wiring.");
    while (1);
  }

  Serial.println("GNSS module detected.");
   //BLE
  BLEDevice::init("ESP32 BLE_2");
  pServer = BLEDevice::createServer();
  pServer->setCallbacks(new MyServerCallbacks());

  BLEService* pService = pServer->createService(SERVICE_UUID);
  pCharacteristic = pService->createCharacteristic(
    CHARACTERISTIC_UUID,
    BLECharacteristic::PROPERTY_READ |
    BLECharacteristic::PROPERTY_NOTIFY
  );
  pCharacteristic->addDescriptor(new BLE2902());
  pService->start();
  pServer->getAdvertising()->start();

  Serial.println("BLE Server is running...");
}

void loop() {
  String msg;
  myGNSS.checkUblox(); // Processes any new data
  if (deviceConnected) {
    if (myGNSS.getFixType() == 5) {
      Serial.println("GNSS FIX acquired!");
      msg = "Time Fix accquired";
      pCharacteristic->setValue(msg.c_str());
      pCharacteristic->notify();
      delay(500);
    } 
    else if (myGNSS.getFixType() >= 2) {
      Serial.println("GNSS FIX acquired!");
      msg = "Fix accquired";
      pCharacteristic->setValue(msg.c_str());
      pCharacteristic->notify();
      delay(500);
    } 
    else {
      Serial.print("No fix. Current fix type: ");
      Serial.println(myGNSS.getFixType());
      msg = "Fix Not accquired";
      pCharacteristic->setValue(msg.c_str());
      pCharacteristic->notify();
      delay(500);
    }
    msg = "Buffer";
    pCharacteristic->setValue(msg.c_str());
    pCharacteristic->notify();
    delay(100);
     
    }
    /*
  if (myGNSS.getFixType() >= 3) {
  Serial.println("GNSS FIX acquired!");
  } 
  else {
  Serial.print("No fix. Current fix type: ");
  Serial.println(myGNSS.getFixType());
  }

  if (myGNSS.getLatitude() != 0 && myGNSS.getLongitude() != 0) {
    Serial.print("Lat: ");
    Serial.println(myGNSS.getLatitude() / 1e7, 7);
    Serial.print("Lng: ");
    Serial.println(myGNSS.getLongitude() / 1e7, 7);
  }

  Serial.print("Date: ");
  Serial.print(myGNSS.getYear());
  Serial.print("-");
  Serial.print(myGNSS.getMonth());
  Serial.print("-");
  Serial.println(myGNSS.getDay());

  Serial.print("Time: ");
  Serial.print(myGNSS.getHour());
  Serial.print(":");
  Serial.print(myGNSS.getMinute());
  Serial.print(":");
  Serial.println(myGNSS.getSecond());
 */
  delay(100);
}
